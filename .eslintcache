[{"/mnt/d/Documents/Xccelerate/projects/atebite/Ate_Bite/src/screens/sign_up/components/index.tsx":"1","/mnt/d/Documents/Xccelerate/projects/atebite/Ate_Bite/src/App.js":"2","/mnt/d/Documents/Xccelerate/projects/atebite/Ate_Bite/src/screens/home/styles.tsx":"3","/mnt/d/Documents/Xccelerate/projects/atebite/Ate_Bite/src/screens/chatroom/index.tsx":"4","/mnt/d/Documents/Xccelerate/projects/atebite/Ate_Bite/src/screens/chatroom/hooks/useChat.js":"5","/mnt/d/Documents/Xccelerate/projects/atebite/Ate_Bite/src/screens/livefeed/styles.tsx":"6","/mnt/d/Documents/Xccelerate/projects/atebite/Ate_Bite/src/screens/livefeed/index.tsx":"7","/mnt/d/Documents/Xccelerate/projects/atebite/Ate_Bite/src/screens/sign_up/index.tsx":"8","/mnt/d/Documents/Xccelerate/projects/atebite/Ate_Bite/src/screens/voting/index.tsx":"9","/mnt/d/Documents/Xccelerate/projects/atebite/Ate_Bite/src/screens/voting/hooks/useVoting.js":"10","/mnt/d/Documents/Xccelerate/projects/atebite/Ate_Bite/src/screens/home/index.tsx":"11","/mnt/d/Documents/Xccelerate/projects/atebite/Ate_Bite/src/redux/action.js":"12","/mnt/d/Documents/Xccelerate/projects/atebite/Ate_Bite/src/screens/home/components/index.tsx":"13","/mnt/d/Documents/Xccelerate/projects/atebite/Ate_Bite/src/components/index.tsx":"14"},{"size":65,"mtime":1608092429426,"results":"15","hashOfConfig":"16"},{"size":1717,"mtime":1608280501945,"results":"17","hashOfConfig":"16"},{"size":825,"mtime":1608092429425,"results":"18","hashOfConfig":"16"},{"size":1680,"mtime":1608104817212,"results":"19","hashOfConfig":"16"},{"size":2496,"mtime":1608104702388,"results":"20","hashOfConfig":"16"},{"size":993,"mtime":1608101853919,"results":"21","hashOfConfig":"16"},{"size":934,"mtime":1608104887521,"results":"22","hashOfConfig":"16"},{"size":229,"mtime":1608092429427,"results":"23","hashOfConfig":"16"},{"size":3208,"mtime":1608276875353,"results":"24","hashOfConfig":"16"},{"size":2175,"mtime":1608273346882,"results":"25","hashOfConfig":"16"},{"size":302,"mtime":1608092429424,"results":"26","hashOfConfig":"16"},{"size":2517,"mtime":1608277949812,"results":"27","hashOfConfig":"16"},{"size":115,"mtime":1608092429423,"results":"28","hashOfConfig":"16"},{"size":51,"mtime":1608277768638,"results":"29","hashOfConfig":"16"},{"filePath":"30","messages":"31","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"s4sqy3",{"filePath":"32","messages":"33","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"34","messages":"35","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"37","messages":"38","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"39","messages":"40","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"41","usedDeprecatedRules":"42"},{"filePath":"43","messages":"44","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"45","messages":"46","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"47","messages":"48","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"49","messages":"50","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"51","messages":"52","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"53","messages":"54","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"55","messages":"56","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"57","messages":"58","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"59","messages":"60","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/mnt/d/Documents/Xccelerate/projects/atebite/Ate_Bite/src/screens/sign_up/components/index.tsx",[],"/mnt/d/Documents/Xccelerate/projects/atebite/Ate_Bite/src/App.js",[],"/mnt/d/Documents/Xccelerate/projects/atebite/Ate_Bite/src/screens/home/styles.tsx",[],["61","62"],"/mnt/d/Documents/Xccelerate/projects/atebite/Ate_Bite/src/screens/chatroom/index.tsx",[],"/mnt/d/Documents/Xccelerate/projects/atebite/Ate_Bite/src/screens/chatroom/hooks/useChat.js",["63"],"import { useEffect, useRef, useState } from 'react';\nimport socketIOClient from 'socket.io-client';\n\nconst NEW_CHAT_MESSAGE_EVENT= 'newChatMessage'; //name of the event \nconst NEW_FEED_MESSAGE_EVENT= 'newFeedMessage';\nconst SOCKET_SERVER_URL='http://localhost:4000'\n\nconst UseChat = (roomId) => {\n    \n    const [messages, setMessages] = useState([]); //sent and received messages\n    const socketRef = useRef();\n\n    useEffect(()=>{\n        //creates a WebSocket connection\n      socketRef.current = socketIOClient(SOCKET_SERVER_URL, {\n            query: { roomId }, \n            transports: ['websocket'],\n        });\n        \n        //listens for previous messages, when someone joins the room, use the sockerRef.current.on code below but make it for checking previous messages by querying the DB using room_id which should be in the URL. UseEffect is like onload, so it should run it in here.\n\n\n        //listens for incoming messages\n        socketRef.current.on(NEW_CHAT_MESSAGE_EVENT, (message)=>{ \n            //  console.log(message)\n            const incomingMessage = {\n                ...message,\n                ownedByCurrentUser: message.senderId === socketRef.current.id,\n            }\n            setMessages((messages)=> [...messages, incomingMessage]);\n            // console.log(incomingMessage)\n        });\n\n        //destroys socket reference when connection is closed\n        return ()=> {\n            socketRef.current.disconnect();\n        };\n    }, []);\n\n    //sends a message to the server that forwards it to all the users in the same room\n    const sendMessage = (messageBody) => {\n        // let addSpaces = messageBody.replaceAll('\\n','\\s');\n        // console.log(addSpaces)\n        // console.log(messageBody)\n        socketRef.current.emit(NEW_CHAT_MESSAGE_EVENT,{\n            body: messageBody,\n            senderId: socketRef.current.id,\n        });\n        //this is actually an issue, because if the message fails to upload to the db and so gives an error, this will still emit to the feed. this will do for now, but later need to have this emitting once the message is received, not on sent- can put received into variable like this sendMessage, put the below emit into it and return the variable?\n        socketRef.current.emit(NEW_FEED_MESSAGE_EVENT,{\n            body: `${socketRef.current.id} has sent a message`,\n            senderId: socketRef.current.id,\n        });\n    };\n    \n    \n    return { messages, sendMessage };\n};\n\nexport default UseChat;",["64","65"],"/mnt/d/Documents/Xccelerate/projects/atebite/Ate_Bite/src/screens/livefeed/styles.tsx",[],"/mnt/d/Documents/Xccelerate/projects/atebite/Ate_Bite/src/screens/livefeed/index.tsx",[],"/mnt/d/Documents/Xccelerate/projects/atebite/Ate_Bite/src/screens/sign_up/index.tsx",[],"/mnt/d/Documents/Xccelerate/projects/atebite/Ate_Bite/src/screens/voting/index.tsx",["66","67"],"/mnt/d/Documents/Xccelerate/projects/atebite/Ate_Bite/src/screens/voting/hooks/useVoting.js",[],"/mnt/d/Documents/Xccelerate/projects/atebite/Ate_Bite/src/screens/home/index.tsx",[],"/mnt/d/Documents/Xccelerate/projects/atebite/Ate_Bite/src/redux/action.js",[],"/mnt/d/Documents/Xccelerate/projects/atebite/Ate_Bite/src/screens/home/components/index.tsx",[],"/mnt/d/Documents/Xccelerate/projects/atebite/Ate_Bite/src/components/index.tsx",[],{"ruleId":"68","replacedBy":"69"},{"ruleId":"70","replacedBy":"71"},{"ruleId":"72","severity":1,"message":"73","line":38,"column":8,"nodeType":"74","endLine":38,"endColumn":10,"suggestions":"75"},{"ruleId":"68","replacedBy":"69"},{"ruleId":"70","replacedBy":"71"},{"ruleId":"76","severity":1,"message":"77","line":20,"column":10,"nodeType":"78","messageId":"79","endLine":20,"endColumn":15},{"ruleId":"76","severity":1,"message":"80","line":20,"column":17,"nodeType":"78","messageId":"79","endLine":20,"endColumn":25},"no-native-reassign",["81"],"no-negated-in-lhs",["82"],"react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'roomId'. Either include it or remove the dependency array.","ArrayExpression",["83"],"@typescript-eslint/no-unused-vars","'count' is assigned a value but never used.","Identifier","unusedVar","'setCount' is assigned a value but never used.","no-global-assign","no-unsafe-negation",{"desc":"84","fix":"85"},"Update the dependencies array to be: [roomId]",{"range":"86","text":"87"},[1476,1478],"[roomId]"]